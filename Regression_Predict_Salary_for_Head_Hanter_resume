{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ДЗ Сompleted of Занятие 6. Регрессия. Оценка зарплаты по базе hh","provenance":[{"file_id":"1UpihcWuyABDJi8-awgIiBspP2JuKcmpo","timestamp":1585060124366},{"file_id":"1XEo3sEIdN6n9WENHG961AAFtNeCHT0wz","timestamp":1585028833374},{"file_id":"1aeSRjj-yeRfxtqOGQwtR73N64YC2Vl7d","timestamp":1584882383311},{"file_id":"1pVyY5GEeTcew2Kp0Na0SfQKHbcwL1FQ6","timestamp":1584879911144},{"file_id":"1o02MHFmxddg_UaiLFsxTLwz13ml3YI30","timestamp":1581587612019},{"file_id":"1-yoS5uvmdFRrfKimjGw2_Ma2DFn39rBK","timestamp":1579420104695}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"jOcB_KxjX3fH","colab_type":"text"},"source":["PRO задание. Вариант 3\n","\n","В одной из баз - hh или квартиры, сделайте callback, который будет выводить на каждой эпохе:\n","\n"," - Текущую mae\n"," - График mae по всем эпохам на обучающей и проверочная выборках\n"," - Текущий scatter\n"," - Текущую гистограмму ошибок\n"," - Время обучения на эпохе, время обучения суммарное и сколько времени остаётся до конца обучения\n"," - Изменял бы шаг обучения, если начинается “пила” или mae выходит на плато\n"," - Сохраняет в .h5 сеть с лучшей точностью\n","\n","*желательно использовать clear_output и verbose=0\n","**callback должен быть самописный, нельзя использовать готовые\n"]},{"cell_type":"code","metadata":{"id":"0_cb-YDAJoEb","colab_type":"code","outputId":"3f007450-e5f7-44ae-e16d-937d41ff1578","executionInfo":{"status":"ok","timestamp":1585309570672,"user_tz":-180,"elapsed":5894,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":80}},"source":["# Рисовать графики сразу же\n","%matplotlib inline\n","\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from tensorflow.keras import utils\n","import numpy as np\n","import re\n","import time\n","\n","from keras.optimizers import Adam,Adadelta,SGD,Adagrad,RMSprop\n","from keras.models import Sequential, Model\n","from keras.layers import concatenate, Input, Dense, Dropout, BatchNormalization, Flatten\n","\n","from keras.preprocessing.text import Tokenizer, text_to_word_sequence\n","from sklearn.model_selection import train_test_split\n","\n","from keras.callbacks import LambdaCallback\n","import keras\n","import keras.backend as K\n","\n","from IPython.display import clear_output\n","\n","from google.colab import files"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will switch to TensorFlow 2.x on the 27th of March, 2020.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now\n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"Uj9e4m4VWyMH","colab_type":"text"},"source":["#Загружаем базу"]},{"cell_type":"code","metadata":{"id":"NSaCOOQIdOZf","colab_type":"code","outputId":"3e4c03c6-e219-452b-d2d5-b8ffe9bd8eaa","executionInfo":{"status":"ok","timestamp":1585309774746,"user_tz":-180,"elapsed":199724,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["# Для загрузки данных используем drive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KTYXsgeVd9Xe","colab_type":"code","colab":{}},"source":["fixed_df = pd.read_csv('/content/drive/My Drive/Базы/hh.csv')# Это то, куда вы скачали файл\n","fixed_df = fixed_df[:5000] # большую базу тренировка с CallBacks не тянет в Colab по ОЗУ"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jVMp_zYtW1PR","colab_type":"text"},"source":["#Содержимое базы"]},{"cell_type":"code","metadata":{"id":"rX4zOIYgvA59","colab_type":"code","outputId":"0eba75ce-3350-4f4b-881e-4298a64b680c","executionInfo":{"status":"ok","timestamp":1585309788983,"user_tz":-180,"elapsed":754,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Количество резюме и критерии\n","print(fixed_df.shape)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["(5000, 13)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"W-jAN-bnvkQX","colab_type":"code","colab":{}},"source":["# # Пример данных\n","# n = 0 # Берем первое резюме\n","# for i in range(len(fixed_df.values[n])): # Выводим значение каждой графы резюме\n","#   print(i, \" \", fixed_df.values[n][i])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ezbj4X7MW3qc","colab_type":"text"},"source":["#Парсим базу"]},{"cell_type":"code","metadata":{"id":"qhDp9BnOB9Ec","colab_type":"code","colab":{}},"source":["##############################################\n","####Убрать кодировку в описаниях \\xa0 \\n\n","##############################################\n","fixed_df = fixed_df.drop(fixed_df.columns[0],axis = 1) # Убираем первый столбец с продублированными индексами. Он нам не нужен\n","\n","i=0\n","for j in range(12):  # Для каждого из столбцов таблицы\n","    for i in range(fixed_df.shape[0]): # По всем резюме\n","        if type(fixed_df.values[i][j])!=float: # если данные текстовые, то заменяем фрагменты кодировки ASCII на отсутствие символов\n","            fixed_df.values[i][j] = fixed_df.values[i][j].replace(\"\\xa0\",\"\")\n","            fixed_df.values[i][j] = fixed_df.values[i][j].replace(\"\\n\",\" \")\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AjhHSNXQx8bN","colab_type":"code","colab":{}},"source":["# Данные о поле и возрасте\n","def getParameterSexAge(arg):\n","  out = [0,0]\n","  #Если М, то 1. По умолчанию 0 - Ж\n","  if \"М\" in arg:\n","    out[0] = 1\n","  # текущий год - год рождения\n","  year_tec = 2020\n","  if (len(arg) > 7):\n","    out[1] = year_tec - int(re.findall(r'\\d{4}', arg)[0])\n","  return out\n","\n","# Полученный возраст превращаем в класс возрастной категории\n","def getParameterAgeVect(arg):\n","  outClass =int((arg-13)/5)\n","  outClass = max(0, min(10,outClass))\n","  # На выходе получаем вектор с нужной категорией возраста\n","  return list(utils.to_categorical(outClass, 11).astype('int'))\n","\n","\n","# Зарплата\n","def getParameterSalary(arg):\n","    global salaryStr, num #т.к. используем, меняем в функции\n","    # Сначала получаем чистое число, убираем лишние знаки\n","    salaryStr = 0\n","    arg=str(arg)  \n","    salaryStr = int(re.sub(r'[^0-9]+', '', arg))\n","    curr_ =re.sub('[0-9]','',arg).replace('.','')\n","\n","    # Конвертируем в рубли, если валюта\n","    if 'USD' in curr_ :   salaryStr = float(salaryStr)*65\n","    elif 'KZT' in curr_:  salaryStr = float(salaryStr)*0.17\n","    elif 'грн' in curr_:  salaryStr = float(salaryStr)*2.6\n","    num =salaryStr \n","    return salaryStr\n","\n","\n","# Данные о городе\n","def getParameterCity(arg):\n","  millionCities = \"Новосибирск Екатеринбург Нижний Новгород Казань Челябинск Омск Самара Ростов-на-Дону Уфа Красноярск Пермь Воронеж Волгоград\"\n","  sarg=arg.split(',')\n","  for item in sarg:\n","    item= item.strip()\n","    if item == \"Москва\":          return [1, 0, 0, 0]\n","    if item == \"Санкт-Петербург\": return [0, 1, 0, 0]\n","    if item in millionCities:     return [0, 0, 1, 0]\n","  return [0, 0, 0, 1]\n","\n","# Данные о желаемой занятости\n","def getParameterEmployment(arg):\n","  out= [0, 0, 0, 0]\n","  if (\"стажировка\" in arg):           out[0]=1\n","  if (\"частичная занятость\" in arg):  out[1]=1\n","  if (\"проектная работа\" in arg):     out[2]=1\n","  if (\"полная занятость\" in arg):     out[3]=1\n","  return out\n","\n","# Данные о желаемом графике работы\n","def getParameterSchedule(arg):\n","  out = [0, 0, 0, 0]\n","  if (\"гибкий график\" in arg):    out[0]=1\n","  if (\"полный день\" in arg):      out[1]=1\n","  if (\"сменный график\" in arg):   out[2]=1\n","  if (\"удаленная работа\" in arg): out[3]=1\n","  return out\n","\n","# Данные об образовании\n","def getParameterEducation(arg):\n","  out = [0, 0, 0, 0] #По умолчанию не указано\n","  if arg in \"Высшее Higher education\":  out[0] = 1\n","  if arg in \"Среднее специальное\":      out[1] = 1\n","  if arg in \"Неоконченное высшее\":      out[2] = 1\n","  if arg in \"Среднее образование\":      out[3] = 1\n","  return out\n","\n","# Данные об опыте работы\n","def getParameterExperience(arg):\n","  sarg=arg.split(\" \", 5)\n","  years = 0\n","  months = 0\n","  if len(sarg)!=6: sarg.append(0);sarg.append('');sarg.append(0);sarg.append('')\n","  try:\n","    #print(sarg)\n","    years = int(sarg[2])\n","  except ValueError:\n","    years = 0\n","\n","  try:\n","    months = int(sarg[4])\n","  except ValueError:\n","    months = 0\n","  return 12*years+months\n","\n","# Категориальное представление опыта работы\n","def getParameterExperienceVector(arg):\n","  out = getParameterExperience(arg)\n","  outClass = 0\n","  if (out > 6): # если больше 6 месяцев\n","    outClass = 1\n","  if (out > 12): # если больше 12 месяцев\n","    outClass = 2\n","  if (out > 24): # если больше 24 месяцев\n","    outClass = 3\n","  if (out > 36): # если больше 36 месяцев\n","    outClass = 4\n","  if (out > 60): # если больше 60 месяцев\n","    outClass = 5\n","  if (out > 96): # если больше 96 месяцев\n","    outClass = 6\n","  if (out > 120): # если больше 120 месяцев\n","    outClass = 7\n","  if (out > 156): # если больше 156 месяцев\n","    outClass = 8\n","  if (out > 192): # если больше 192 месяцев\n","    outClass = 9 \n","  if (out > 240): # если больше 240 месяцев\n","    outClass = 10\n","  \n","  return list(utils.to_categorical(outClass, 11).astype('int'))\n","\n","# Извлекаем все параметры\n","def getAllParameters(val):\n","  result = getParameterSexAge(val[0])\n","  sex = result[0]  #getParameterSex() #параметры о поле\n","  age =getParameterAgeVect(result[1]) #параметры о возрасте\n","  city = getParameterCity(val[3]) #параметры о городе\n","  employment = getParameterEmployment(val[4]) #параметры о желаемой занятости\n","  shedule = getParameterSchedule(val[5]) #параметры о желаемом графике\n","  education = getParameterEducation(val[9]) #параметры об образовании\n","  experience = getParameterExperienceVector(val[6]) #параметры об опыте\n","  out = [] \n","  \n","# Склеиваем все параметры в вектор  \n","  out.append(sex)\n","  out += age\n","  out += city\n","  out += employment\n","  out += shedule\n","  out += education\n","  out += experience\n","  \n","  return out\n","\n","# Создаем тренировочную выборку\n","def get01Data(values):\n","  xTrain = []\n","  yTrain = []\n","  \n","  # Предсказывать будем зарплату\n","  for val in values:\n","    y = getParameterSalary(val[1])\n","    \n","    # Все, что не зарплата - обучающая выборка\n","    if (y != -1):\n","      x = getAllParameters(val)\n","      xTrain.append(x)\n","      yTrain.append(y/1000)\n","  \n","  xTrain = np.array(xTrain)\n","  yTrain = np.array(yTrain)\n","  \n","  #minY = yTrain.min()\n","  #maxY = yTrain.max()\n","  #yTrain = (yTrain - minY)/(maxY-minY)\n","  \n","  return (xTrain, yTrain)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u4rgkGUpW9LH","colab_type":"text"},"source":["#Простые данные"]},{"cell_type":"code","metadata":{"id":"sKmOqU4we9cP","colab_type":"code","outputId":"0cf127b8-380d-418a-d61e-97cf6bdc58e1","executionInfo":{"status":"ok","timestamp":1585309806802,"user_tz":-180,"elapsed":706,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["(xTrain01, yTrain) = get01Data(fixed_df.values) # Извлекаем значения загруженного набора данных\n","\n","# Размер набора параметров и зарплат\n","print(xTrain01.shape) \n","print(yTrain.shape)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["(5000, 39)\n","(5000,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XU4gBH6Fy_18","colab_type":"code","outputId":"1f6c8e65-7be9-486b-f5ae-f6a959ebe6c2","executionInfo":{"status":"ok","timestamp":1585309810489,"user_tz":-180,"elapsed":785,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["n = 0 # Пример обработанных данных\n","print(xTrain01[n])\n","print(yTrain[n])"],"execution_count":8,"outputs":[{"output_type":"stream","text":["[1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\n"," 0 0]\n","27.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pIkMUO1rXJyZ","colab_type":"text"},"source":["#Используем простые текстовые данные"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Se9HLZpClPX7","colab":{}},"source":["# Выкачиваем данные по профессиям\n","def getXTrainTProf(values):\n","  xTrainTProf = []\n","  allTextProf = \"\"\n","  \n","  for val in values:\n","    currText = \"\"\n","    if (type(val[3]) != float):\n","      currText += val[2]\n","    if (type(val[7]) != float):\n","      currText += \" \" + val[7]\n","    \n","    allTextProf += currText + \" \"\n","    if (getParameterSalary(val[1]) != -1): # Проверяем, если есть данные о зарплате\n","      xTrainTProf.append(currText)\n","  \n","  xTrainTProf = np.array(xTrainTProf)\n","  \n","  return (xTrainTProf, allTextProf)\n","\n","# Выкачиваем данные по резюме\n","def getXTrainTRez(values):\n","  xTrainTRez = []\n","  allTextRez = \"\"\n","  \n","  for val in values:\n","    currText = \"\"\n","    if (type(val[6]) != float):\n","      currText += val[6]\n","    \n","    allTextRez += currText + \" \"\n","    if (getParameterSalary(val[1]) != -1):\n","      xTrainTRez.append(currText)\n","  \n","  xTrainTRez = np.array(xTrainTRez)\n","  \n","  return (xTrainTRez, allTextRez)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"seIjSf0eXO-T","colab_type":"text"},"source":["#Загружаем простые текстовые данные"]},{"cell_type":"code","metadata":{"id":"OM_Z105_tsXI","colab_type":"code","colab":{}},"source":["# Вытаскиваем професии для выборки\n","(xTrainTProf, allTextProf) = getXTrainTProf(fixed_df.values) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pGxQmcSZucFr","colab_type":"code","outputId":"b6138074-1efe-455f-c457-a4014c2e542c","executionInfo":{"status":"ok","timestamp":1585309823850,"user_tz":-180,"elapsed":704,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(len(allTextProf)) # длина всего словаря профессий\n","print(allTextProf[:20]) # пример текста всех профессий (первые 20 символов)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["265245\n","Старший администрато\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cbGMNkt40tFP","colab_type":"code","outputId":"ab3a015e-396c-492c-a46a-9d19987787a9","executionInfo":{"status":"ok","timestamp":1585309825845,"user_tz":-180,"elapsed":588,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(xTrainTProf[10]) # пример профессии 11го резюме"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Системный администратор ГБУСОН \"Кавказ\"\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8tObvnNXj8xT","colab_type":"code","colab":{}},"source":["#################\n","#Преобразовываем текстовые данные в числовые/векторные для обучения нейросетью\n","#################\n","\n","maxWordsCount = 10000 #определяем макс.кол-во слов/индексов, учитываемое при обучении текстов\n","\n","#для этого воспользуемся встроенной в Keras функцией Tokenizer для разбиения текста и превращения в матрицу числовых значений\n","tokenizer = Tokenizer(num_words=maxWordsCount, filters='!\"#$%&()*+,-–—./:;<=>?@[\\\\]^_`{|}~\\t\\n\\xa0', lower=True, split=' ', oov_token='unknown', char_level=False)\n","#выше задаем параметры:\n","#(num_words=maxWordsCount) - определяем макс.кол-во слов/индексов, учитываемое при обучении текстов\n","#(filters='!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n') - избавляемся от ненужных символов\n","#(lower=True) - приводим слова к нижнему регистру\n","#(split=' ') - разделяем слова по пробелу\n","#(char_level=False) - просим токенайзер не удалять однобуквенные слова\n","\n","tokenizer.fit_on_texts(xTrainTProf) #\"скармливаем\" наши тексты, т.е даём в обработку методу, который соберет словарь частотности\n","items = list(tokenizer.word_index.items()) #Вытаскиваем индексы слов для просмотра"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"e30HPJG0j9TT","colab_type":"code","colab":{}},"source":["#преобразовываем текст в последовательность индексов согласно частотному словарю\n","xTrainProfIndexes = tokenizer.texts_to_sequences(xTrainTProf) #обучающие тесты в индексы"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0Pi3Up8OvTtr","colab_type":"text"},"source":["**Подготовка данных**\n"]},{"cell_type":"code","metadata":{"id":"VZpWSQWf4pgY","colab_type":"code","outputId":"c703dc58-bc25-44d8-cd3f-92a77ffba69f","executionInfo":{"status":"ok","timestamp":1585309835142,"user_tz":-180,"elapsed":575,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["#Преобразовываем полученные выборки из последовательности индексов в матрицы нулей и единиц по принципу Bag of Words\n","xTrainProf01 = tokenizer.sequences_to_matrix(xTrainProfIndexes)#подаем xTrain в виде списка чтобы метод успешно сработал\n","print(xTrainProf01.shape)       #Размер обучающей выборки, сформированной по Bag of Words\n","print(xTrainProf01[0][0:100]) #фрагмент набора слов в виде Bag of Words"],"execution_count":15,"outputs":[{"output_type":"stream","text":["(5000, 10000)\n","[0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0.]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"o6_iNoGOwQM2","colab_type":"code","outputId":"13ed46ac-3152-4ab3-9d67-9770cd124253","executionInfo":{"status":"ok","timestamp":1585309838748,"user_tz":-180,"elapsed":582,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["n = 0\n","print(xTrainTProf[n]) # профессия\n","print(xTrainProfIndexes[n]) # профессия через индексы"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Старший администратор Трц Ривьера\n","[81, 7, 873, 2072]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"39aRV3sUxPGU","colab_type":"code","outputId":"0b08eef3-88f5-4a19-ef76-b9a650cda5a7","executionInfo":{"status":"ok","timestamp":1585309840757,"user_tz":-180,"elapsed":602,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(xTrainProf01.shape) # посмотрим размер выборки"],"execution_count":17,"outputs":[{"output_type":"stream","text":["(5000, 10000)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vQgLqh4pYG4q","colab_type":"text"},"source":["#Загружаем сложные текстовые данные"]},{"cell_type":"code","metadata":{"id":"21GMs4CCCJ6C","colab_type":"code","colab":{}},"source":["# Вытаскиваем резюме для выборки\n","(xTrainTRez, allTextRez) = getXTrainTRez(fixed_df.values)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"ce3S0JD3yx_G","colab":{}},"source":["#################\n","#Преобразовываем текстовые данные в числовые/векторные для обучения нейросетью\n","#################\n","\n","maxWordsCount = 5000 #определяем макс.кол-во слов/индексов, учитываемое при обучении текстов\n","\n","#для этого воспользуемся встроенной в Keras функцией Tokenizer для разбиения текста и превращения в матрицу числовых значений\n","tokenizer = Tokenizer(num_words=maxWordsCount, filters='!\"#$%&()*+,-–—./:;<=>?@[\\\\]^_`{|}~\\t\\n\\xa0', lower=True, split=' ', oov_token='unknown', char_level=False)\n","#выше задаем параметры:\n","#(num_words=maxWordsCount) - определяем макс.кол-во слов/индексов, учитываемое при обучении текстов\n","#(filters='!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n') - избавляемся от ненужных символов\n","#(lower=True) - приводим слова к нижнему регистру\n","#(split=' ') - разделяем слова по пробелу\n","#(char_level=False) - просим токенайзер не удалять однобуквенные слова\n","\n","tokenizer.fit_on_texts(xTrainTRez) #\"скармливаем\" наши тексты, т.е даём в обработку методу, который соберет словарь частотности\n","items = list(tokenizer.word_index.items()) #Вытаскиваем индексы слов для просмотра"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"DeWwE5Q3yx_J","colab":{}},"source":["#преобразовываем текст в последовательность индексов согласно частотному словарю\n","xTrainRezIndexes = tokenizer.texts_to_sequences(xTrainTRez) #обучающие тесты в индексы"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"B5ZLkgVfyx_N"},"source":["**Функции для формирования выборки по отрезкам текста с заданным шагом**\n","\n"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"81DbiXefyx_O"},"source":["**Подготовка данных**\n"]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"23f0c334-8efe-4b34-e25a-8d3d432859c0","executionInfo":{"status":"ok","timestamp":1585309869984,"user_tz":-180,"elapsed":2047,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"id":"ynUtDfRYyx_T","colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["#Преобразовываем полученные выборки из последовательности индексов в матрицы нулей и единиц по принципу Bag of Words\n","xTrainRez01 = tokenizer.sequences_to_matrix(xTrainRezIndexes)#подаем xTrain в виде списка чтобы метод успешно сработал\n","print(xTrainRez01.shape)       #Размер обучающей выборки, сформированной по Bag of Words\n","print(xTrainRez01[0][0:100]) #фрагмент набора слов в виде Bag of Words"],"execution_count":21,"outputs":[{"output_type":"stream","text":["(5000, 5000)\n","[0. 1. 0. 1. 1. 1. 1. 1. 1. 0. 1. 1. 1. 0. 0. 1. 1. 1. 0. 1. 1. 0. 0. 1.\n"," 1. 0. 0. 0. 0. 0. 0. 0. 1. 0. 1. 1. 0. 0. 0. 1. 0. 0. 0. 1. 0. 0. 0. 1.\n"," 0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 1. 0. 0. 0. 1. 0. 0. 0. 1. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0.\n"," 0. 0. 0. 0.]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"3ZIr8N8dzl98","outputId":"f6b9bd42-137b-4bed-8854-69b3d2417922","executionInfo":{"status":"ok","timestamp":1585309874753,"user_tz":-180,"elapsed":626,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(xTrainRez01.shape) # Размер выборки самых частых слов\n","print(xTrainRez01[555]) # Пример из отформатированной выборки"],"execution_count":22,"outputs":[{"output_type":"stream","text":["(5000, 5000)\n","[0. 1. 1. ... 0. 0. 0.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RCnNinbgXks8","colab_type":"text"},"source":["#Составная нейронка на всех типах данных одновременно"]},{"cell_type":"code","metadata":{"id":"Nvil-iv_y_j5","colab_type":"code","outputId":"46008a99-ff36-4dcf-c3f3-501adde36277","executionInfo":{"status":"ok","timestamp":1585309880433,"user_tz":-180,"elapsed":840,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":224}},"source":["#maxWordsCount = 1000 # Устанавливаем самые частые и превращаем их в индексы, выборку\n","#xTrainRezIndexes = changeSetToIndexes(xTrainTRez, vocabularyRez, maxWordsCount)\n","#xTrainRez01 = changeSetTo01(xTrainRezIndexes, maxWordsCount)\n","\n","input1 = Input((xTrain01.shape[1],))\n","input2 = Input((xTrainProf01.shape[1],))\n","input3 = Input((xTrainRez01.shape[1],))\n","\n","x1 = BatchNormalization()(input1) # Создаем ветку х1\n","x1 = Dropout(0.5)(x1)\n","x1 = Dense(10, activation=\"relu\")(x1)\n","x1 = Dense(1000, activation=\"relu\")(x1)\n","x1 = Dense(100, activation = \"relu\")(x1)\n","\n","#x2 = BatchNormalization()(input2) # Создаем ветку х2\n","x2 = Dense(25, activation=\"relu\")(input2)\n","x2 = Dense(8, activation=\"tanh\")(x2)\n","x2 = Dense(5, activation = \"elu\")(x2)\n","\n","#x3 = BatchNormalization()(input3) # Создаем ветку х3\n","x3 = Dense(1000, activation=\"tanh\")(input3)\n","x3 = Dense(20, activation = \"elu\")(x3)\n","x3 = Dense(5, activation = \"elu\")(x3)\n","\n","x = concatenate([x1, x2, x3]) # Объединяем все три ветки\n","\n","x = Dense(15, activation='linear')(x)\n","x = Dropout(0.5)(x)\n","x = Dense(1, activation='relu')(x) # Финальный нейрон, делает регрессию\n","\n","modelS = Model((input1, input2, input3), x) # В Model загружаем стартовые и последнюю точки \n","\n","\n","\n"],"execution_count":23,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3733: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cBRcYcaSv7mu","colab_type":"text"},"source":["# Callbacks Keras"]},{"cell_type":"code","metadata":{"id":"-gcC4xJuIhS5","colab_type":"code","colab":{}},"source":["# Функция возвращает время в виде строки - часы, минуты, секунды\n","def get_str_time(dig_time):\n","  if dig_time <= 60:\n","    return str(round(dig_time,2)) + ' сек.'\n","  if dig_time <= 3600:\n","    minute = dig_time//60\n","    secund = dig_time - minute*60\n","    return str(minute) + ' мин. ' + str(round(secund,2)) + ' сек. '\n","  if dig_time > 3600:\n","    hour   = dig_time//3600\n","    minute = (dig_time - hour*3600)//60\n","    secund = dig_time - hour*3600 - minute*60\n","    return str(hour) + ' час. ' + str(minute) + ' мин. ' + str(round(secund,2)) + ' сек. '\n","\n","# Функция для вычисления усредненной ошибки и записи ее в список\n","def pr_mae(epoch, logs):\n","  # Тренировочная выборка\n","  # Делаем предсказание\n","  pred = modelS.predict([xTrain01[train_mask], xTrainProf01[train_mask], xTrainRez01[train_mask]]) #Полуаем выход сети на тренировочной выборке\n","  # Среднее значение ошибки \n","  delta = pred.flatten() - yTrain[train_mask]        #Считаем разность предсказания и правильных зарплат \n","  absDelta = abs(delta)                              #Берём модуль отклонения\n","  cur_train_mae = sum(absDelta) / len(absDelta)      #Считаем усреднённую ошибку\n","  list_train_mae.append(cur_train_mae)                                 #Записываем вычесленную усредненную ошибкау в список\n","  print(\"Эпоха\", epoch+1, \"модуль ошибки на тренировочных данных\", round(cur_train_mae, 3)) #Выводим усреднённую ошибку \n","\n","  # Валидационная выборка\n","  # Делаем предсказание \n","  pred = modelS.predict([xTrain01[val_mask], xTrainProf01[val_mask], xTrainRez01[val_mask]]) #Полуаем выход сети на проверочной выборке\n","  # Среднее значение ошибки \n","  delta = pred.flatten() - yTrain[val_mask]           #Считаем разность предсказания и правильных зарплат\n","  absDelta = abs(delta)                               #Берём модуль отклонения\n","  cur_valid_mae = sum(absDelta) / len(absDelta)       #Считаем усреднённую ошибку            \n","  list_valid_mae.append(cur_valid_mae)                                 #Записываем вычесленную усредненную ошибкау в список\n","  print(\"Эпоха\", epoch+1, \"модуль ошибки на валидацинных данных \", round(cur_valid_mae, 3))  #Выводим усреднённую ошибку \n","\n","\n","# Функция отрисовки графика усредненной ошибки по эпохам\n","def pl_mae(epoch, logs):\n","  plt.plot(list_train_mae, \n","          label='Средняя ошибка на обучающем наборе')\n","  plt.plot(list_valid_mae, \n","          label='Средняя ошибка на проверочном наборе')\n","  plt.xlabel('Эпоха обучения')\n","  plt.ylabel('Средняя ошибка')\n","  plt.legend()\n","  plt.show()\n","\n","# Функция отрисовки графика предсказаний на валидационных данны может показать перекос, если есть\n","def pl_scr_val(epoch, logs):\n","  # Разброс предсказаний на валидационных данных \n","  pred = modelS.predict([xTrain01[val_mask], xTrainProf01[val_mask], xTrainRez01[val_mask]]) #Полуаем выход сети на проверочной выборке\n","\n","  plt.scatter(yTrain[val_mask], pred.flatten()) \n","  plt.xlabel('Правильные значение')\n","  plt.ylabel('Предсказания')\n","  plt.axis('equal')\n","  plt.xlim(plt.xlim())\n","  plt.ylim(plt.ylim())\n","  plt.plot([-100, 100], [-100, 100])\n","  plt.show()\n","\n","# Функция отрисовки гистограммы модуля ошибки на валидационных данных\n","def pl_hist_val(epoch, logs):\n","  \n","  pred = modelS.predict([xTrain01[val_mask], xTrainProf01[val_mask], xTrainRez01[val_mask]]) #Полуаем выход сети на проверочной выборке\n","\n","  error = (pred.flatten() - yTrain[val_mask])\n","\n","  #Построение гистограммы\n","  plt.hist(abs(error), bins = 100)\n","  plt.xlabel(\"Значение ошибки, тыс.руб.\")\n","  plt.ylabel(\"Количество\")\n","  plt.show()\n","\n","# Функция расчета статистик по времени обучения\n","def gt_time(epoch, logs):\n","  #print()\n","  clear_output() # Очистка экрана\n","  list_time.append(time.time())\n","  print('Текущая эпоха         = ', epoch+1)\n","  print('Время обучения на текущей эпохе  = ', get_str_time(list_time[-1] - list_time[-2]))\n","  print('Среднее время обучения на эпоху   = ', get_str_time((list_time[-1] - list_time[0])/ len(list_time)))\n","  print('Время обучения с начала обучения  = ', get_str_time(list_time[-1] - list_time[0]))\n","  print()\n","  print('Осталось эпох                  = ', epochs - epoch - 1)\n","  time_cont = (list_time[-1] - list_time[0]) / len(list_time) * (epochs - epoch)\n","  print('Осталось времени до конца обучения = ', get_str_time(time_cont))\n","  print('-'*80)\n","  print()\n","\n","# Функция записи в файл лучшего результата по МАЕ\n","def sv_best_mae(epoch, logs):\n","  if (len(list_valid_mae[:-1]) > 1) and (list_valid_mae[-1] < np.array(list_valid_mae[:-1]).min()):\n","    modelS.save('/content/drive/My Drive/UAI/Neuron Networks/Занятие №6 Регрессия/best_mae.h5')  # creates a HDF5 file 'my_model.h5'\n","    print('Сохранена модель с МАЕ =', list_valid_mae[-1])\n","\n","# Функция для изменения шага обучения по МАЕ\n","def ch_lerning_rate(epoch, logs):\n","  print('Текущий Learning Rate = ', list_lr[-1])\n","  \n","  # Плато и пилу будем искать на участке протяженностью num эпох\n","  num = 5     #  Количество эпох для анализа\n","  saw   = 0.05   #  Пила - МАЕ скачет больше чем на 5% последних num эпох\n","  plato = 0.005 #  Плато - МАЕ не меняется больше чем на 0.5% на протяжении последних num эпох\n","  \n","\n","  if (len(list_valid_mae) >= num):\n","\n","    # Анализ на есть ли плато\n","    razn = abs(list_valid_mae[-1] - list_valid_mae[-num])\n","    razn_per = razn/list_valid_mae[-1]\n","\n","    if razn_per < plato:       \n","      print('Нашли плато')\n","      # Увеличиваем Learning Rate в 2 раза\n","      lr_new = list_lr[-1] * 2\n","      # Проверяем верхнюю границу Learning Rate, что бы она не подымалась выше 1e-3 \n","      if lr_new > 1e-3:\n","        lr_new = 1e-3\n","        list_lr.append(lr_new) \n","        print('Достигнута верхняя граница lr, сохранен текущий lr = ', lr_new)\n","        return\n","      else:\n","        print('Увеличил lr в 2 раза, новый lr = ', lr_new)\n","        list_lr.append(lr_new)\n","        modelS.compile(optimizer=Adam(lr=lr_new), loss='mse', metrics=['mae'])\n","        return\n","\n","    # Анализ есть ли пила - соседние показания скачут больше чем на saw процентов\n","    list_MAE = list_valid_mae[-num:]\n","    for i in range(num-1):\n","      razn = abs(list_MAE[i] - list_MAE[i+1])\n","      razn_per = razn/list_MAE[i] \n","      if razn_per > saw :\n","        print('Нашли пилу')\n","        # Уменьшаем Learning Rate в 2 раза\n","        lr_new = list_lr[-1] / 2\n","        # Проверяем нижнюю границу Learning Rate, что бы она не опускалась ниже 1e-7 \n","        if lr_new < 1e-7:\n","          lr_new = 1e-7\n","          list_lr.append(lr_new) \n","          print('Достигнута нижняя граница lr, сохранен текущий lr = ', lr_new)\n","          return\n","        else:\n","          print('Уменьшил lr в 2 раза, новый lr = ', lr_new)\n","          list_lr.append(lr_new)\n","          modelS.compile(optimizer=Adam(lr=lr_new), loss='mse', metrics=['mae'])\n","          return\n","\n","# Коллбэки\n","print_mae           = LambdaCallback(on_epoch_end=pr_mae)\n","plot_mae            = LambdaCallback(on_epoch_end=pl_mae)\n","plot_scr_val        = LambdaCallback(on_epoch_end=pl_scr_val)\n","plot_hist_val       = LambdaCallback(on_epoch_end=pl_hist_val)\n","get_time            = LambdaCallback(on_epoch_end=gt_time)\n","save_best_mae       = LambdaCallback(on_epoch_end=sv_best_mae)\n","change_lerning_rate = LambdaCallback(on_epoch_end=ch_lerning_rate)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z98WHQPjcqrF","colab_type":"code","colab":{}},"source":["# Условия и данные для тренировки\n","\n","list_train_mae = [] # Список с усредненными ошибками по эпохам на тренировочных данных\n","list_valid_mae = [] # Список с усредненными ошибками по эпохам на валидационных данных\n","list_lr        = [] # Список с learning rate\n","\n","time_start = 0 # время начала обучения\n","time_sum   = 0 # Общее время обучения\n","list_time = [] # Список времен по эпохам\n","\n","epochs        = 100          # Количество эпох обучения\n","batch_size    = 256         # Батч Сайз\n","list_lr.append(1e-3)        # Начальная Скорость обучения\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"heryfuZTL8Ld","colab_type":"code","colab":{}},"source":["# # Полные выборки\n","# train_mask = [x for x in range(0,50000)]\n","# val_mask   = [x for x in range(50000, len(xTrain01))]\n","# print(len(train_mask))\n","# print(len(val_mask))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"u5P3QbGCSLU6","colab_type":"code","outputId":"86596651-35aa-4443-f783-4745db625baf","executionInfo":{"status":"ok","timestamp":1585309971673,"user_tz":-180,"elapsed":609,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# Короткие выборки (на полной базе тренировка с callbacks незапускается из-за нехватки ОЗУ)\n","train_mask = [x for x in range(0,3400)]\n","val_mask   = [x for x in range(3400, 4000)]\n","print(len(train_mask))\n","print(len(val_mask))"],"execution_count":28,"outputs":[{"output_type":"stream","text":["3400\n","600\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"otW1P68s1qeY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"534ec3e8-1588-4bbb-b58a-22a50789e4b1","executionInfo":{"status":"ok","timestamp":1585310030771,"user_tz":-180,"elapsed":656,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}}},"source":["print(type(xTrain01))\n","xTrain01.shape"],"execution_count":31,"outputs":[{"output_type":"stream","text":["<class 'numpy.ndarray'>\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(5000, 39)"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"o_7sNqpf1ZnP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"98e220a0-db58-4dc0-c805-6fb60eb10efa","executionInfo":{"status":"ok","timestamp":1585310208475,"user_tz":-180,"elapsed":773,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}}},"source":["xTrain01[train_mask]\n","print(xTrain01[train_mask].shape)"],"execution_count":32,"outputs":[{"output_type":"stream","text":["(3400, 39)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"n8W5xWc2O1Ue","colab_type":"code","outputId":"38ad5258-0e7c-4261-93ea-0d13bdef5407","executionInfo":{"status":"ok","timestamp":1585060018497,"user_tz":-180,"elapsed":8186,"user":{"displayName":"Алексей Степанов","photoUrl":"","userId":"11407479424270053923"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# Тренируем Сеть\n","list_time.append(time.time()) # Время старта начала обучения\n","\n","modelS.compile(optimizer=Adam(lr=list_lr[-1]), loss='mse', metrics=['mae'])\n","\n","history = modelS.fit([xTrain01[train_mask], xTrainProf01[train_mask], xTrainRez01[train_mask]], \n","                    yTrain[train_mask], \n","                    epochs=epochs, \n","                    validation_data=([xTrain01[val_mask], xTrainProf01[val_mask], xTrainRez01[val_mask]], \n","                    yTrain[val_mask]), \n","                    verbose=0,\n","                    callbacks=[get_time, print_mae, plot_mae, plot_scr_val, plot_hist_val, change_lerning_rate, save_best_mae] )"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Текущая эпоха         =  100\n","Время обучения на текущей эпохе  =  20.02 сек.\n","Среднее время обучения на эпоху   =  19.29 сек.\n","Время обучения с начала обучения  =  32.0 мин. 28.78 сек. \n","\n","Осталось эпох                  =  0\n","Осталось времени до конца обучения =  19.29 сек.\n","--------------------------------------------------------------------------------\n","\n","Эпоха 100 модуль ошибки на тренировочных данных 7.272\n","Эпоха 100 модуль ошибки на валидацинных данных  26.722\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nCDP+P69x43TNUhqGAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjAsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8GearUAAAgAElEQVR4nO3df5xcdX3v8dc7mw3ZYGUDRAoLmKA0\nXpEHBPdhQ3OvVaAEhUJUKnClUqXSH7YWsKmh5bZY7aOxqKi3VuQhbektF8OvG1K1pgr4o1RSNiYY\nEFMi8mtBiUAAySL58bl/nO8Mk9mZ2TObOfNj9/18PPaxM99zZuazJ5PzOef7UxGBmZkZwIxOB2Bm\nZt3DScHMzMqcFMzMrMxJwczMypwUzMysbGanA9gbBx54YMyfP7/TYZiZ9ZT169f/NCLm1drW00lh\n/vz5jIyMdDoMM7OeIumhettcfWRmZmVOCmZmVuakYGZmZU4KZmZW5qRgZmZlPd37yLrf6g2jXL52\nM49tG+OQwQGWL13IskVDnQ7LzOpwUrDCrN4wyiU3b2Jsxy4ARreNccnNmwCcGMy6lKuPrDCXr91c\nTgglYzt2cfnazR2KyMwm4qRghXls21hT5WbWeU4KVphDBgeaKjezznNSsMIsX7qQgf6+PcoG+vtY\nvnRhhyIys4m4odkKU2pMdu8js97hpGCFWrZoyEnArIe4+sjMzMqcFMzMrMxJwczMypwUzMyszEnB\nzMzKnBTMzKzMScHMzMqcFMzMrMxJwczMypwUzMyszEnBzMzKCk0Kki6SdK+keyRdJ2m2pAWS1kna\nImmVpFlp333S8y1p+/wiYzMzs/EKSwqShoAPAMMR8TqgDzgb+BhwRUS8GngaOD+95Hzg6VR+RdrP\nzMzaqOjqo5nAgKSZwBzgceAE4Ma0/RpgWXp8RnpO2n6iJBUcn5mZVSgsKUTEKPBx4GGyZPAMsB7Y\nFhE7026PAqV5lYeAR9Jrd6b9D6h+X0kXSBqRNLJ169aiwjczm5aKrD6aS3b1vwA4BNgXOGVv3zci\nroqI4YgYnjdv3t6+nZmZVSiy+ugk4EcRsTUidgA3A0uAwVSdBHAoMJoejwKHAaTt+wFPFhifmZlV\nKTIpPAwsljQntQ2cCHwfuB04M+1zHnBLerwmPSdtvy0iosD4zMysSpFtCuvIGoy/C2xKn3UV8CHg\nYklbyNoMrk4vuRo4IJVfDKwoKjYzM6tNvXwxPjw8HCMjI50Ow8ysp0haHxHDtbZ5RLOZmZU5KZiZ\nWZmTgpmZlTkpmJlZmZOCmZmVOSmYmVmZk4KZmZU5KZiZWZmTgpmZlTkpmJlZmZOCmZmVOSmYmVmZ\nk4KZmZU5KZiZWZmTgpmZlTkpmJlZmZOCmZmVOSmYmVmZk4KZmZU5KZiZWZmTgpmZlTkpmJlZmZOC\nmZmVOSmYmVmZk4KZmZU5KZiZWZmTgpmZlTkpmJlZmZOCmZmVOSmYmVmZk4KZmZU5KZiZWZmTgpmZ\nlTkpmJlZmZOCmZmVOSmYmVlZoUlB0qCkGyX9QNJ9ko6XtL+kr0m6P/2em/aVpM9I2iLpe5KOKzI2\nMzMbr+g7hU8DX42I1wDHAPcBK4BbI+JI4Nb0HOAtwJHp5wLgcwXHZmZmVQpLCpL2A94IXA0QES9G\nxDbgDOCatNs1wLL0+AzgnyJzJzAo6eCi4jMzs/GKvFNYAGwF/kHSBklfkLQvcFBEPJ72+TFwUHo8\nBDxS8fpHU9keJF0gaUTSyNatWwsM38xs+smVFCTtlPSspOck7Ui/n53gZTOB44DPRcQi4HleqioC\nICICiGYCjoirImI4IobnzZvXzEvNzGwCee8UNkXEyyPiF4B7IuIXIuLlE7zmUeDRiFiXnt9IliR+\nUqoWSr+fSNtHgcMqXn9oKjMzszbJmxT2AZA0CzhC0mUTvSAifgw8ImlhKjoR+D6wBjgvlZ0H3JIe\nrwHenXohLQaeqahmMjOzNpiZc79vSbob6Ac+BTwr6V8j4i0TvO4PgWtTMnkAeA9ZIrpe0vnAQ8A7\n075fAd4KbAG2p33NzKyNciWFiPhdSa8DdkXEfQCS7szxuo3AcI1NJ9bYN4D354nHzMyKkfdOgYi4\np+r5f7Q+HDMz66RcSUHSc7zUS0jpd+RobDYzsx6St6H508A9wDmp51Ge3kdmZtZjciWFiLiUbMTx\nUkm3SlpSbFhmZtYJeauPSpPT/SPZSOW/k/RIRJxWVGBmZtZ+eRuaP1H1/Clg3xbHYmZmHZa3S+qb\niw7EzMw6L2/10Z/XKo+Iv2xtOGZm1kl5ex89n37eV/H4+aKCMjOzzshbffQJAEnnlh6bmdnU0+x6\nCk1Nc21mZr0lb5vCv5AlhCMkrSmVR8TpRQVmZmbtl7dL6sfTb1cdmZlNYXnbFL5ZdCBmZtZ5eZfj\nXCzpLkk/k/SipF05luM0M7Mek7eh+W+Bc4D7gQHgt4HPFhWUmZl1Ru7eRxGxBeiLiF0R8Q/AKcWF\nZWZmnZC3oXl7WlJzo6S/AR6n+e6sZmbW5fKe2H8z7fsHZCOZDwPeUVRQZmbWGXl7Hz0kaVZEPCvp\nE8ABEfFQwbGZmVmb5e199BFgq6SVwO3AtyT9r0IjMzOztsvbpvAO4JXAo2RVR7uAu4CPFBSXmZl1\nQO6G5ojYJum2iHgaQNJYgXGZmVkH5G1o/g94aa4jSfsBTxQVlJmZdUbehuYPVD1/Bji5kIjMzKxj\n8lYfIelU4ChgdqnMK6+ZmU0teXsfXQmcBfwhIOA3yBqezcxsCsnbpvArEfFu4OmI+DBwPPBLxYVl\nZmadkDcplHoabZd0CLADOLiYkMzMrFPytil8SdIgcDnwXbJV2L5QWFRmZtYReXsflQap3STpS8Ds\n1APJzMymkLwNzSeVHkfEz4FZkr5YWFRmZtYRedsULpN0NoCk9wDfBFYXFpWZmXVE3jaFU4DrJf0J\ncDfw3yPiqeLCMjOzTsh7pzALeC8wCjwFhKT9C4vKzMw6Im9SWE82/9HrgLeT9UAayfNCSX2SNqQG\naiQtkLRO0hZJq9KKbkjaJz3fkrbPb/aPMTOzvZMrKUTEgog4Iv0u/RyR8zP+CLiv4vnHgCsi4tXA\n08D5qfx8ssFxrwauSPuZmVkb5e199P40TqH0fK6k38/xukOBU0ljGiQJOAG4Me1yDbAsPT4jPSdt\nPzHtb2ZmbZK3+uh9EbGt9CStqfC+HK/7FPAnwO70/ABgW0TsTM8fBYbS4yHgkfT+O4Fn0v5me1i9\nYZQlK29jwYovs2TlbazeMNrpkMymjLy9j/okKSICsnYCssbnuiSdBjwREeslvWnvwtzjfS8ALgA4\n/PDDW/W21iNWbxjlkps3MbZjFwCj28a45OZNACxbNNTopT1h9YZRLl+7mce2jXHI4ADLly6cEn+X\n9Y68dwpfBVZJOlHSicB1qayRJcDpkh4EvkhWbfRpYFBSKRkdStajifT7MIC0fT/gyeo3jYirImI4\nIobnzZuXM3ybKi5fu7mcEErGduzi8rWbOxRR65QS3ui2MYIs4V20aiOXrt7U6dBsGsmbFD4E3A78\nXvq5laxaqK6IuCQiDo2I+cDZwG0R8a70Pmem3c4DbkmP16TnpO23le5MzEoe21Z7Fdh65d0iT5VX\nrYQXwLV3PuwqMmubvL2PdkfE5yLizPTzeeAYSW+UdGCTn/kh4GJJW8jaDK5O5VcDB6Tyi4EVTb6v\nTQOHDA40Vd4Nat0BXHLzpnEn+nqJLWBK3AlZb8jVpiDpMzWKzwI+TFbt89NGr4+IbwDfSI8fAN5Q\nY58XyBbvMatr+dKFe7QpAAz097F86cIORtVYoyqvyvaCQwYHGO3ROyGbOvI2NJ8B/HlV2ekR8Xct\njsesodJJtJcaY/NWeS1fupALV22sue/gnP6Gn+EGamuVvEnhyYi4prJA0oUFxGM2oWWLhnrqhFfv\nDqC6ymvZoiEuufl7jO3YPW7feq1rqzeMctmae9k2tqNcNtV6ZFl75W1oPlLS1yVdL+mTkk4gW6vZ\nzCawfOlCBvr79iirV+X1Qo2EAPBMxUm/pNRWsa3GtqnSI8vaL++dwpuAPuBlwALgj4GjJR0G/DQi\nXOFpVkczVV557ypK71fdVlHJ7RA2GXlXXltfVXS1pL8ha2j+HHBXqwMzm0ryVnk105A+0Um/m3tk\nWffKe6eApFcCR0bE1yUNAB+JiOeKC80sM50aUVtxVwHd3yPLulfeLqnvI5taYn/gVWQjka8ETiwu\nNOt1rTiZT/VpLWrZm7sKgLlz+vmLXz9qyh4fK1beO4X3k40tWAcQEfdLekVhUVnPa9XJPG8f/+mo\nF7vnWvfLmxR+HhEvlmayTnMTeQoKq6tVJ/OJ+vhPp6qlWnqte651v7xdUr8p6U+BAUm/BtwA/Etx\nYVmva9UcRY2mtcg7fYSZ5Zc3KawAtgKbgN8BvgJcWlRQ1vtaNUdRoz7+U3nGVLNOyT0hHtmqaB8h\n64Z6jWcwtUaaGbDVyLJFQ/z1249maHAAAUODA/z1249m2aKhnp0x1ayb5e19dCpZb6Mfko1kXiDp\ndyLiX4sMznpXKxtB69WbNzPQq9Ome9uH9Y68Dc2fAN4cEVsAJL0K+DLgpGB1Fd0IWuSMqa08iU/H\nbrXWu/ImhedKCSF5APDANeuoyd6NTHTCz3sSz5s43K3WeknepDAi6SvA9WRdUX8DuEvS2wEi4uaC\n4jNrqNm7kTwn/Dwn8dUbRrl41UZK09eNbhvj4jTtdXU8bvuwXpK399Fs4CfAr5JNjrcVGAB+HTit\nkMjMCpCnx1Kek/glN3+P6vlMd6fyar24WpxNX3knxHtP0YGYtUO9E/7otjFWbxhl2aKhXA3YtdY8\nqFW+esMoz/9857j9PDeRdauGSaHOMpxlEfGB1oZjVqz9Bvprrj8AlKuRJmrAzjs4rrqqqtJxh+/n\n9gTrShPdKdRahtOsp1Q2CDdaGqpUjXTHihOA2g3YpRN9PTMq3r/Regd3/PApLl29iY8uO3pSf1O3\ncZfbqWOipPBU9TKcZr1k3NX6BEMuS9VL9RqwJ1rY5n/+8uHj3que69Y9skdS6NUTq7vcTi0TJQWP\nWraeNtFJvNrgnH6WrLyNx7aNMTinn4hsKczSSbrRif7cxYfvcZJvtN4BwK6IcjtGL55YS0ms1t/o\nLre9K/ciO2YlvXRF20y3zxmCn72wk6e3Z20Opd+QnaQvWrWx7lXS0ODAuKqgeusdVCqd+HttLEOj\n9pISd7ntTRMlhWMkPVujXEBExMsLiMm6WLde0dZLVPWu1mcIdled4XcH7G4wpVe9LfV6EpWOx4Vp\n/EItpRN/r41lyHMH5i63valhUoiIvkbbbfrphiva6gTw5tfM46b1ozUTVb2eRPvMnFG3F1Izhia4\nU1q2aKjhHQZQ/jt6ZR4nmDhZuctt73L1kTWl0RXt3lQr1XotjO8BBIy7U7n2zofHnXQn6kl0UYOr\n91Zr1A0WKMdU1DxORWjUXjJRorTupl6eAXt4eDhGRkY6Hca0smTlbTVPBnPn9PPCjt3jTmqlaa4b\nqVU/3T9DINix66Xv52Su8AU1E1S9v2MyBLyrqpG50qK//Lc92icqVR6jXmqrqfVvlvff2zpP0vqI\nGK61Le80F2ZA/XUSIpj0gje1qqR27I49EkLp/Zqt8qm3Ilutv6PBEIaG2wK49s6H6w5q21YnIQB7\nnESXLRrijhUncMVZxwJw0aqNLFl5W1euJNdonQvrba4+sqZUTho3um2MPomxHbvqNjrmaShtR2Nq\ndbtHrb9jV527ZgFXnHVs3e6XkCWGeu0qg3P6a94pzJ3TP27/bm3Ir2WyU6P30h3RdOQ7BWvaskVD\n5SvteifSkjwNpc00ps5QqlqahOrkk/fv2G+gv3wVP9Qg1nrJrd5b1yqf6kuMel3t7uekYE1ZvWGU\nJStv48JVGyfskpi3obRWVU7/DNHfN/7kvzuy2UgnkxZqJZ88XStV8WHLly6s+9n7DfTXLH+mTpVX\nrfJe65rarKme9KYCVx9Zbqs3jLL8hrvZUd3Bv0q9xt166i2WA/DB6+8edxW/a4LPrxfTm18zr/x3\nlD4rzzs9vX3HHq8Z6J/B9hqzpD73853lEcqVmulu2mtdU5s11ZPeVODeR5bbsR/+twkbeocGB8rd\nQPfW6g2jDQd+TVatgWsTEfnmfJmhrFqo1iR6eXrqTPVePfV6fbXye2MTa9T7yHcKlttECaGV/eon\nmo10b0ziRiP3JGCl9663ottEjatFLTHaLXptPMZ05DsFy23+ii/X3dbqAUutHEfQSe24Au61u4te\nSWBTme8UrHCtPvG1OyE06pK6N9pRV94NU480Y7JdWa09Cut9JOkwSbdL+r6keyX9USrfX9LXJN2f\nfs9N5ZL0GUlbJH1P0nFFxWaTM1ind0298r3Rp8l1O52sIhICtKeBuKjG21JPswUrvty1g+is9Yrs\nkroT+GBEvBZYDLxf0muBFcCtEXEkcGt6DvAW4Mj0cwHwuQJjs0m47PSjao4ROO2Yg1v+WUWdpFsh\nb7qqXsKzqBNsvcSzNwnJ4wmmr8KSQkQ8HhHfTY+fA+4DhsiW+Cyt5nYNsCw9PgP4p8jcCQxKav3Z\nxiZt2aIhznrDYeNOijetH236ZDHRSbLRILFOKs1zlMfs/uy/V9En2HpTj+xN463HE0xfbWlTkDQf\nWASsAw6KiMfTph8DB6XHQ8AjFS97NJU9XlGGpAvI7iQ4/PB8/zmtdW7/wda6M5LWqyeuNdX1qv98\npDzeYXTbGMtvuBt4qffNzl35V0trpyA7Bnk8vX0HF67aiDR+9HIr6/wn22OpEY8nmL4KTwqSXgbc\nBFwYEc+qoq44IkJSU/UEEXEVcBVkvY9aGatNrF4DcL2TRa25fP75zofH7bdjd3Dhqo1cuGojgxNM\nNd1pzZ4Y69WEVb/P3vTKaXXj7VQfRGf1FTrNhaR+soRwbUTcnIp/UqoWSr+fSOWjwGEVLz80lVmX\nWL1htG59eq2TxeoNo3zw+rubWiMZJh4P0WmtOjFWvk+31eEXUSVlvaHI3kcCrgbui4hPVmxaA5yX\nHp8H3FJR/u7UC2kx8ExFNZN1gcvXbq45iEsw7mSxesMoy28cP0VFr2vVibH6fbqtDt9TY09fRVYf\nLQF+E9gkqTRXwZ8CK4HrJZ0PPAS8M237CvBWYAuwHXhPgbHZJNSdBZTx0zp/+F/uHbceQq/rk3jH\n67NqmslMv9EnsTuiZtVQN9bhezzB9FRYUoiIf6d+770Ta+wfwPuLisf2Xr165lo9heqtNNbLdkVw\n0/pRhl+5f8P9arWJTDTCuN6xnSHVnGSvmkcJW6t46mzLbfnShePGKfTP0LSqZ85TpbPxL07mU2cd\n21TVS606fMgS0URtC93WHmG9zdNcWFPGTWNdo81gqp+MHts2xswZYmeNmfVmpqRZXfVy6epN5WnA\n+yTO+eXD9ljTubRvranCJ+q+2mvTXFh3852C5XbZmnvHzTC6O7LySlN9gNMhgwM1EwLAzt0xbkDe\npas38c93Plw+2e+K4J/vfJhLV+85C+yyRUPsrtMw36htoRvbI6x3OSlYbvW6ilaXT4XZTevJ0/uo\nugrnunWP1NyvVvlkpqwoYpoLm76cFKzl2j2ZXTtMpltmqQqnXrfcWuXLly4ctwxpf1/jdhuPKbBW\ncpuCtUSpqqTRSbCXXXHWsZOqn39s21jdabnrJs/qXSc4nEVMc2HTl5OC5dZoScqLVm3MvTpZL6pe\nRS2vQwYHmH/AAHf88Klx2xYfMXdc2eVrN49bA3vH7piw0dhjCqxVXH1kuTU66U/lhADju6IueVXj\nsQrwUhXOg0/WbmOpVe5GY+s0JwWznEa3jZWryeqd6Pukce0PzZzo3WhsnebqI8ut1hTQ002pGqle\nD6tdETy48tQ9ypqZcbTohe098tkm4jsFy226JwR4qRqpxgJ0ADXLm+lRVOREdB75bHn4TsFymyHG\nDV6bjh5LJ9Va6h6fHD2Kqq/iJ9vjqR6PfLY8fKdguTkhZJqt32/Uo6ikHVfxbsS2PJwUzJpQqt/v\nr/M/p1Z5npNxO9ZTcCO25eGkYLkNDvR3OoSOK9Xv11sqYsduxs19lOdk3I6reI98tjycFCy3y04/\nqtMhdNTQ4EC57r1RVVp19U+ek3E7ruK9mprl4YZmy+2GkYc7HUJHvfk185rav1T9c8eKE4DG01AU\n3RW1xCOfbSJOCpZbrakappPbf7C16deUxidMdDL2/EXWLZwUzHKaTP1+MzPG+ireuoHbFMxyqqzf\nz3uqn4ozxtrU5qRglkN1/X7eU/2Qu3taj3FSMMuhupfO3DkTd891d0/rRW5TsNzqLRbTy/L+TdV1\n/fVeUqpW6pWGYk+QZ9WcFCy3xUfMnVI9kB5ceSoLVnx5Uq+tt151pPftBaWpNUrdYEtjK6D5xYRs\n6nD1keX2/cef63QILZdncFitkdz1ehX10vrU7Zhaw3qPk4Ll9vT22lfHvWr1hlGe//nOhvv0z1DN\nkdz1qpx6qXrNE+RZLa4+smmregQxwL6z+ujvm8EzYzsa1rEP1Vk4Z+6cfpasvK0n6uibWfzHpg8n\nBZu2qhMCwOCcWeVpKRqpNS1Ff5/42Qs7y3dU3V5H366pNay3uPrIrELeqpNak8vtO2vmuHUTurmO\n3hPkWS2+U7ApQ+QfVFZPM1Un1dNS1OvJ1M119J5aw6r5TsGmjB+tPJVzFx9e7gHUJ7HvrL6a+86d\n09/ytQW8iI1NBb5TsNz2ndXH8y+Or4fvJh9ddjQfXXZ0+Xl1X3zITv5/8etZj6JWDtxyHb1NBU4K\nlttfve1oLly1sdNhNGWiKalbWXXi6a9tKnBSsNxGHure0cyNhoy1s97cdfTW69ymYLldt+6RTodQ\n17sWH97pEMymBCcFy61bRutWNyafu/jwPdoRzGzyuqr6SNIpwKeBPuALEbGywyFZhRlqvGB9OwgY\nfuX+HUsCnlXUprquuVOQ1Ad8FngL8FrgHEmv7WxUVmmfmZ3/ugTZ9BSrN4y2/bNLPZlGt40RvDRi\nuROxmBWl8//LX/IGYEtEPBARLwJfBM7ocExW4YUdu9v6eX2qPetop0YJe1ZRmw66KSkMAZUtmY+m\nsj1IukDSiKSRrVu3ti04g1/cb3bbPkvAJ955LLvrtGN0YpSwZxW16aCbkkIuEXFVRAxHxPC8efM6\nHc60MfbiLl62T7FNUH1SeQ6eK846lmWLhrpqlHA3xWJWlG5KCqPAYRXPD01l1mFjL+7i/GvuYsvW\nn3HuLx9eyJdmoL+PT7zzGH608lTuWHFCufF2+dKFLZ+OYrK6KRazonRTUrgLOFLSAkmzgLOBNR2O\nadorJYTvPPAkn3znMXz0bUfzwMpTOfIV+076PftnZN1K88zO2U0zeXZTLGZFUXRJ33MASW8FPkXW\nJfXvI+KvGu0/PDwcIyMjbYltOqpOCG9bdGinQzKzFpC0PiKGa23rqnEKEfEV4CudjsOcEMymq26q\nPrIu4YRgNn05KdgenBDMpjcnBStzQjAzJwUDnBDMLNNVvY+aJWkr8FCNTQcCP21zOHuj1+IFx9wO\nvRYvOOZ2aEW8r4yImqN/ezop1CNppF53q27Ua/GCY26HXosXHHM7FB2vq4/MzKzMScHMzMqmalK4\nqtMBNKnX4gXH3A69Fi845nYoNN4p2aZgZmaTM1XvFMzMbBKcFMzMrGxKJAVJH5QUkg5MzyXpM5K2\nSPqepOMq9j1P0v3p57wOxHq5pB+kuP6fpMGKbZekmDdLWlpRfkoq2yJpRbtjrtRNsVSSdJik2yV9\nX9K9kv4ole8v6Wvp3/trkuam8rrfkTbH3Sdpg6QvpecLJK1Lca1K08gjaZ/0fEvaPr9D8Q5KujF9\nh++TdHwPHOOL0nfiHknXSZrdbcdZ0t9LekLSPRVlTR/XlpzfIqKnf8gW5llLNojtwFT2VuBfyVZ1\nXAysS+X7Aw+k33PT47ltjvdkYGZ6/DHgY+nxa4G7gX2ABcAPyaYQ70uPjwBmpX1e26Fj3TWx1Ijt\nYOC49PgXgP9Kx/RvgBWpfEXF8a75HelA3BcD/xf4Unp+PXB2enwl8Hvp8e8DV6bHZwOrOhTvNcBv\np8ezgMFuPsZkS/r+CBioOL6/1W3HGXgjcBxwT0VZU8e1Vee3tn+pCjiYNwLHAA/yUlL4PHBOxT6b\n00njHODzFeV77NeB2N8GXJseXwJcUrFtLXB8+llbUb7Hfm2Ot2tiyRHrLcCvlf7tU9nBwOZG35E2\nx3gocCtwAvCl9J/8p7x00VA+3qXvQ3o8M+2nNse7XzrBqqq8m49xae33/dNx+xKwtBuPMzC/Kik0\ndVxbdX7r6eojSWcAoxFxd9Wm0heh5NFUVq+8U95LlvGhN2LupljqSrf8i4B1wEER8Xja9GPgoPS4\nG/6WTwF/AuxOzw8AtkXEzhoxleNN259J+7fTAmAr8A+pyusLkvali49xRIwCHwceBh4nO27r6e7j\nXNLscW3J8e6qRXZqkfR14BdrbPoz4E/JqmO6SqOYI+KWtM+fATuBa9sZ21Qn6WXATcCFEfGspPK2\niAhJXdEHW9JpwBMRsV7SmzodT04zyao4/jAi1kn6NFm1Rlk3HWOAVA9/BllC2wbcAJzS0aAmoZ3H\nteuTQkScVKtc0tFk/9B3p//4hwLflfQGYJSsraHk0FQ2Crypqvwb7Yq5RNJvAacBJ0a6z6N+zDQo\nb7dGMXacpH6yhHBtRNycin8i6eCIeFzSwcATqbzTf8sS4HRlS9DOBl4OfBoYlDQzXaVWxlSK91FJ\nM8mqcp5sY7yQXXk+GhHr0vMbyZJCtx5jgJOAH0XEVgBJN5Md+24+ziXNHteWnN96tvooIjZFxCsi\nYn5EzCf7wh4XET8G1gDvTq30i4Fn0m3YWuBkSXPTFcTJqaxtJJ1CVmVwekRsr9i0Bjg79X5YABwJ\n/CdwF3Bk6i0xi6zxa007Y67QTbHsQdmVwdXAfRHxyYpNa4BSL4zzyNoaSuW1viNtERGXRMSh6bt7\nNnBbRLwLuB04s068pb/jzLR/W6/I0/+tRyQtTEUnAt+nS49x8jCwWNKc9B0pxdy1x7lCs8e1Nee3\ndjb6FNxI8yAvNTQL+CxZT9ivMsgAAAS3SURBVJlNwHDFfu8FtqSf93Qgzi1k9X4b08+VFdv+LMW8\nGXhLRflbyXrT/JCsCqqTx7lrYqmK678DAXyv4ti+law++FbgfuDrwP4TfUc6EPubeKn30RFkFwNb\nyKo69knls9PzLWn7ER2K9VhgJB3n1WS9XLr6GAMfBn4A3AP8H7Iefl11nIHryNo8dpBd4J4/mePa\nivObp7kwM7Oynq0+MjOz1nNSMDOzMicFMzMrc1IwM7MyJwUzMyvr+sFrNvVI2kXWla5kf2BNRPxB\nh0Iys8RJwTphLCKOLT1JI7yHOxeOmZW4+si6iqR/lHSlpBFJ/5XmCELSfEnflvTd9PMrqfxNkp6R\ntFHSA5IuTuW/Jelv0+OFknZKOrPicx6UtEnZ+gv3pLLLJP1xnZgqX3tPimd+5fz3Fdt/VvF4uaS7\n0rz3H67zN38nTTB3r6R3NPrM9Hi1pPVp/wsqjk/lXPzfkDScHp+cPuO7km5I80OVjkFpDZIDJT04\n0bGT9HpJ30yfvzZNv2BTiJOCdaP5wBuAU4ErJc0mm/fl1yLiOOAs4DMV+3873XmcBZxb4/0+AtxX\nVdYH/CrZqOdCSDqZbLqSN5CNBH69pDdW7xcRx0fEIuAiYFxSquG9EfF6srurD0g6gGymVVXvmE76\nlwInpWM3QraGQ17lY6dsbqn/DZyZPv/vgb9q4r2sB7j6yLrR9RGxG7hf0gPAa8jm8f9bSccCu4Bf\nqtj/f0jaCLwa2KNdIl0tzyCbLrnSAPAC2UR0lS6SdC7wPPDBiLgzlV8u6dL0+FUV+78qfTbADRFR\neZI8Of1sSM9fRpYkvlUV4yvI5uKZD7y7YlO9z/yApLelx4el97wb+EVJ+0fEUxX7LiZbbOiObOof\nZgHfqdh+e2rj6as6DrWO3ULgdcDX0nv1kU3NYFOIk4J1o+q5V4LsKvonZAsqzSA7oZd8OyJOS1fF\n6yV9sWLbR8iujD9UKkh3HjMiYrs07uL6ioj4uKSTgE8Cv5LKl0fEjen1lVVGP4yIYyXNATZKurFi\nm4C/jojPN/xjI54AjpJ0PNlV/U31PlPZNNsnkS0Es13SN4DZETEm6c+Bb0vaQZYgSzF8LSLOqfPx\nb46In6ZjN1K1rfrYCbg3Io5v9PdYb3P1kXWj35A0Q9KryCYu20w2hfHj6Q7iN6lxZQtsJ7sD2Cc9\n/9X0muqqozPZ82q5lifJrqrzGkuf319RthZ4b0Ud/lC6KyhTtl7w7PT0BbIr8Ub2A55OCeE1ZHcC\nAETEZyPiqFSVVjrB3wkskfTq9Hn7Svqlce86Xq1jtxmYl5IXkvolHZXjvayH+E7ButHDZDNUvhz4\n3Yh4QdLfATdJejfwVbLqnZJS9dFs4JMR8Uy6AziSrF2iLFW7/B7ZOr21vF/SMmAO2XKjE1kg6d/J\nktG3IuKe0t1HRPybpP8GfCeV/YyszeOJitcfBNyibIeZwIUTfN5Xgd+VdB/ZSfrORjtHxFZlvbuu\nk1RKlpeSzXTbyLhjFxEvpgbnz0jaL8X7KeDeCd7LeohnSbWuIukfyaaRvnGifc2s9Vx9ZGZmZb5T\nMDOzMt8pmJlZmZOCmZmVOSmYmVmZk4KZmZU5KZiZWdn/Bw8umTbmy3cGAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Текущий Learning Rate =  6.4e-06\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iJwVfi9EbEMW","colab_type":"text"},"source":["# Callbacks Keras New"]},{"cell_type":"code","metadata":{"id":"Ab71HRHGbABo","colab_type":"code","colab":{}},"source":["# New\n","class MyCallback(keras.callbacks.Callback):\n","    def __init__(self):\n","        self.time_start = 0      # Время начала обучения\n","        self.time_sum   = 0      # Общее время обучения\n","        self.list_time = []      # Список времен по эпохам\n","        self.list_train_mae = [] # Список МАЕ по тренировочной выбоке\n","        self.list_val_mae = []   # Список МАЕ по валидационной выбоке\n","        self.list_lr = []        # Список Learning Rate\n","\n","        # Переменные для хранения предсказаний модели для выборок\n","        #self.pred_val   = 0\n","\n","        self.time_start = time.time()\n","        self.list_time.append(self.time_start) # Время старта начала обучения\n","\n","    # Функция возвращает время в виде строки - часы, минуты, секунды\n","    def get_str_time(self, dig_time):\n","        if dig_time <= 60:\n","          return str(round(dig_time,2)) + ' сек.'\n","        if dig_time <= 3600:\n","          minute = dig_time//60\n","          secund = dig_time - minute*60\n","          return str(minute) + ' мин. ' + str(round(secund,2)) + ' сек. '\n","        if dig_time > 3600:\n","          hour   = dig_time//3600\n","          minute = (dig_time - hour*3600)//60\n","          secund = dig_time - hour*3600 - minute*60\n","          return str(hour) + ' час. ' + str(minute) + ' мин. ' + str(round(secund,2)) + ' сек. '\n","\n","    # Функция расчета статистик по времени обучения\n","    def print_time(self, epoch, logs):\n","        print('Текущая эпоха         = ', epoch+1)\n","        print('Время обучения на текущей эпохе  = ', self.get_str_time(self.list_time[-1] - self.list_time[-2]))\n","        print('Среднее время обучения на эпоху   = ', self.get_str_time((self.list_time[-1] - self.list_time[0])/ len(self.list_time)))\n","        print('Время обучения с начала обучения  = ', self.get_str_time(self.list_time[-1] - self.list_time[0]))\n","        print()\n","        print('Осталось эпох                  = ', epochs - epoch - 1)\n","        time_cont = (self.list_time[-1] - self.list_time[0]) / len(self.list_time) * (epochs - epoch)\n","        print('Осталось времени до конца обучения = ', self.get_str_time(time_cont))\n","        print('-'*80)\n","        print()\n","\n","    # Функция для вычисления усредненной ошибки и записи ее в список\n","    def print_mae(self, epoch, logs):        \n","        # Тренировочная выборка        \n","        print(\"Эпоха\", epoch+1, \"модуль ошибки на тренировочных данных\", round(self.list_train_mae[-1], 3))  #Выводим усреднённую ошибку \n","        # Валидационная выборка\n","        print(\"Эпоха\", epoch+1, \"модуль ошибки на валидационных данных\", round(self.list_val_mae[-1], 3))  #Выводим усреднённую ошибку \n","\n","    # Функция отрисовки графика усредненной ошибки по эпохам\n","    def plot_mae(self):\n","        plt.plot(self.list_train_mae, \n","                label='Средняя абсолютная ошибка на обучающем наборе')\n","        plt.plot(self.list_val_mae, \n","                label='Средняя абсолютная ошибка на проверочном наборе')\n","        plt.xlabel('Эпоха обучения')\n","        plt.ylabel('Средняя абсолютная ошибка')\n","        plt.legend()\n","        plt.show()\n","\n","    # Функция отрисовки графика предсказаний на валидационных данны может показать перекос, если есть\n","    def plot_scr_val(self):\n","        self.pred_val = self.model.predict([self.validation_data[0],self.validation_data[1],self.validation_data[2]]).flatten()\n","        plt.scatter(self.validation_data[3].flatten(), self.pred_val) \n","        plt.xlabel('Правильные значение')\n","        plt.ylabel('Предсказания')\n","        plt.axis('equal')\n","        plt.xlim(plt.xlim())\n","        plt.ylim(plt.ylim())\n","        plt.plot([-100, 100], [-100, 100])\n","        plt.show()\n","\n","    # Функция отрисовки гистограммы модуля ошибки на валидационных данных\n","    def plot_hist_val(self):\n","        error = (self.pred_val - self.validation_data[3].flatten())\n","        #Построение гистограммы\n","        plt.hist(abs(error), bins = 100)\n","        plt.xlabel(\"Значение ошибки, тыс.руб.\")\n","        plt.ylabel(\"Количество\")\n","        plt.show()\n","\n","    # Функция записи в файл лучшего результата по МАЕ\n","    def save_best_mae(self):\n","        if (len(self.list_val_mae[:-1]) > 1) and (self.list_val_mae[-1] < np.array(self.list_val_mae[:-1]).min()):\n","          self.model.save('/content/drive/My Drive/UAI/Neuron Networks/Занятие №6 Регрессия/best_mae.h5')  # creates a HDF5 file 'my_model.h5'\n","          print('Сохранена модель с МАЕ =', self.list_val_mae[-1])\n","\n","    # Функция для изменения шага обучения по МАЕ\n","    def change_lerning_rate(self):\n","        print('Текущий Learning Rate = ', K.get_value(self.model.optimizer.lr))\n","        \n","        # Плато и пилу будем искать на участке протяженностью num эпох\n","        num = 5     #  Количество эпох для анализа\n","        saw   = 0.05   #  Пила - МАЕ скачет больше чем на 5%\n","        plato = 0.001 #  Плато - МАЕ не меняется больше чем на 0.1% на протяжении num эпох\n","      \n","        if (len(self.list_train_mae) >= num):\n","          # Анализ на есть ли плато\n","          razn = abs(self.list_train_mae[-1] - self.list_train_mae[-num])\n","          razn_per = razn/self.list_train_mae[-1]\n","          if razn_per < plato:       \n","            print('Нашли плато')\n","            # Увеличиваем Learning Rate в 2 раза\n","            lr_new = K.get_value(self.model.optimizer.lr) * 2\n","            # Проверяем верхнюю границу Learning Rate, что бы она не подымалась выше 1e-3 \n","            if lr_new > 1e-3:\n","              lr_new = 1e-3\n","              print('Достигнута верхняя граница lr, сохранен текущий lr = ', lr_new)\n","              return\n","            else:\n","              print('Увеличил lr в 2 раза, новый lr = ', lr_new)\n","              K.set_value(self.model.optimizer.lr, lr_new)\n","              return\n","\n","          # Анализ есть ли пила - соседние показания скачут больше чем на saw процентов\n","          list_MAE = self.list_train_mae[-num:]\n","          for i in range(num-1):\n","            razn = abs(list_MAE[i] - list_MAE[i+1])\n","            razn_per = razn/list_MAE[i] \n","            if razn_per > saw :\n","              print('Нашли пилу')\n","              # Уменьшаем Learning Rate в 2 раза\n","              lr_new = K.get_value(self.model.optimizer.lr) / 2\n","              # Проверяем нижнюю границу Learning Rate, что бы она не опускалась ниже 1e-7 \n","              if lr_new < 1e-7:\n","                lr_new = 1e-7\n","                print('Достигнута нижняя граница lr, сохранен текущий lr = ', lr_new)\n","                return\n","              else:\n","                print('Уменьшил lr в 2 раза, новый lr = ', lr_new)\n","                K.set_value(self.model.optimizer.lr, lr_new)\n","                return\n","    \n","    def on_train_begin(self, logs={}):\n","        self.losses = []\n","    \n","    def on_batch_end(self, batch, logs={}):\n","        self.losses.append(logs.get('loss'))\n","\n","    def on_epoch_begin(self, epoch, logs={}):\n","        # Очистка экрана\n","        pass\n","        #print()\n","        #clear_output() # Очистка экрана\n","\n","    def on_epoch_end(self, epoch, logs={}): \n","        clear_output() # Очистка экрана\n","        # Записываем в списки значение МАЕ для тренировочной и валидационной выборок \n","        self.list_train_mae.append(logs.get('mean_absolute_error')) # Список МАЕ по тренировочной выбоке\n","        self.list_val_mae.append(logs.get('val_mean_absolute_error'))   # Список МАЕ по валидационной выбоке  \n","        # Добавляем текущее время в список и печатаем статистику по времени\n","        self.list_time.append(time.time())\n","        self.print_time(epoch, logs)        \n","        # Печать тукущих МАЕ\n","        self.print_mae(epoch, logs)\n","        # Отрисовка МАЕ\n","        self.plot_mae()\n","        # Отрисовка скраттера\n","        self.plot_scr_val()\n","        # Отрисвка гистограммы ошибок\n","        self.plot_hist_val()\n","        # Запись наилучшего результата по МАЕ на валидации\n","        self.save_best_mae()\n","        # Изменение learning rate\n","        self.change_lerning_rate()\n","    \n","    def on_train_end(self, logs={}):\n","        print('Тренировка закончена')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RIAwYxzMdGkq","colab_type":"code","outputId":"b4cfb916-eab3-4e40-a905-d192f1d3dcb8","executionInfo":{"status":"ok","timestamp":1585158331571,"user_tz":-180,"elapsed":1183,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# Короткие выборки (на полной базе тренировка с callbacks незапускается из-за нехватки ОЗУ)\n","# Короткие выборки (на полной базе тренировка с callbacks незапускается из-за нехватки ОЗУ)\n","train_mask = [x for x in range(0,34000)]\n","val_mask   = [x for x in range(34000, 40000)]\n","print(len(train_mask))\n","print(len(val_mask))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["34000\n","6000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yMKPoZCrbLxe","colab_type":"code","outputId":"79352f75-14fe-4214-eb05-5c8c8fc767a1","executionInfo":{"status":"ok","timestamp":1585158896810,"user_tz":-180,"elapsed":1104,"user":{"displayName":"Алексей Степанов","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVGqdBnFPI7ksR2V3-RBv7ZoC0BlnBcZISjv_pQw=s64","userId":"17544615977825205963"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["epochs=100\n","\n","modelS.compile(optimizer=Adam(lr=1e-3), loss='mse', metrics=['mae'])\n","my_callback = MyCallback()\n","history = modelS.fit([xTrain01[train_mask], xTrainProf01[train_mask], xTrainRez01[train_mask]], \n","                    yTrain[train_mask], \n","                    epochs=epochs,\n","                    batch_size=128, \n","                    validation_data=([xTrain01[val_mask], xTrainProf01[val_mask], xTrainRez01[val_mask]], \n","                    yTrain[val_mask]), \n","                    verbose=0,\n","                    callbacks=[my_callback] )"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Текущая эпоха         =  100\n","Время обучения на текущей эпохе  =  5.37 сек.\n","Среднее время обучения на эпоху   =  5.55 сек.\n","Время обучения с начала обучения  =  9.0 мин. 21.01 сек. \n","\n","Осталось эпох                  =  0\n","Осталось времени до конца обучения =  5.55 сек.\n","--------------------------------------------------------------------------------\n","\n","Эпоха 100 модуль ошибки на тренировочных данных 18.142\n","Эпоха 100 модуль ошибки на валидационных данных 25.64\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Текущий Learning Rate =  0.0005\n","Тренировка закончена\n"],"name":"stdout"}]}]}